'linea::ma(x,a)',
'log(x,a)',
"linea::hill_function(x,a,b,c)",
'sin(x*a)',
'(x^a)'),order = 1:8) %>%
mutate(val = '') %>%
mutate(val = if_else(condition = name == 'decay', ' .2 ,.5, .7,. 9',val)) %>%
mutate(val = if_else(condition = name == 'hill', '(1,5,50) ,(1 ,5,50),(1,5,50)',val))
# clean trans_df
trans_df = trans_df %>%
mutate(val = gsub(pattern = ' ',replacement = '',x = val)) %>%
filter(val != "")
# split values by parameter (for func's with +2 params)
ncols = max(stringr::str_count(trans_df$val, "\\),\\(")) + 1
cols = letters[1:ncols]
trans_df = tidyr::separate(fill = 'right',data = trans_df, col = 'val', into = cols, sep = "\\).\\(") %>%
zoo::na.fill('') %>%
as.data.frame() %>%
select(-func,-order) %>%
reshape2::melt(id.vars = 'name') %>%
filter(value != '')  %>%
mutate(value = gsub(pattern = '\\(|\\)',replacement = '',x = value))
# split each parameter (to be tested)
ncols = max(stringr::str_count(trans_df$value, ",")) + 1
cols = paste0('param_',1:ncols)
trans_df = trans_df %>%
tidyr::separate(fill = 'right', col = 'value', into = cols, sep = ",") %>%
zoo::na.fill('') %>%
as.data.frame()
# get all combinations
df = lapply(1:nrow(trans_df),function(x){
v = trans_df[x,] %>%
as.vector()
v = v[3:length(v)]
v = as.numeric(v[v!=''])
return(v)
}) %>%
expand.grid()
# rename combinations
colnames(df) = paste0(trans_df$name,'_',trans_df$variable)
df %>%
reshape2::melt() %>%
transform(variable = sub("(.*)_.*", "\\1", variable),
param = sub(".*_", "", variable)) %>%
arrange(param)
gc()
setwd('/Users/44751/Desktop/github/linea/other/FINAL_PKG/linea/')
devtools::
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::release()
spell_check()
devtools::spell_check()
install.packages('hunspell')
devtools::spell_check()
devtools::release()
devtools::release()
devtools::release()
check_rhub()
devtools::check_rhub()
devtools::install('/Users/44751/Desktop/github/linea/other/FINAL_PKG/linea')
devtools::install('/Users/44751/Desktop/github/linea/other/FINAL_PKG/linea')
print(packageVersion("linea"))
library(linea) # the library in question
library(dplyr) # for pipes (%>%) and data manipulation
library(plotly) # for interactive charts
library(DT) # for interactive tables
# data_path = 'c:/Users/44751/Desktop/github/data/ecomm_data.csv'
data_path = 'https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv'
data = read_xcsv(file = data_path)
data %>%
datatable(rownames = NULL,
options = list(scrollX = TRUE))
model = run_model(data = data,
dv = 'ecommerce',
ivs = c('covid','christmas'))
summary(model)
model = run_model(data = data,
dv = 'ecommerce',
ivs = c('covid','christmas'),
id_var = 'date')
summary(model)
decomposition = model %>% decomping()
print(names(decomposition))
decomposition$variable_decomp %>%
datatable(rownames = NULL,
options = list(scrollX = T))
model %>%
decomp_chart()
decomposition$fitted_values %>%
datatable(rownames = NULL,
options = list(scrollX = T))
model %>%
fit_chart()
model %>%
acf_chart()
model %>%
resid_hist_chart()
model %>%
response_curves()
data = data %>%
get_seasonality(
date_col_name = 'date',
date_type = 'weekly ending')
data %>%
datatable(rownames = NULL,
options = list(scrollX = TRUE))
plot_ly(data) %>%
add_bars(y = ~ week_26,
x = ~ date,
name = 'week_26',
color = color_palette()[1]) %>%
add_bars(y = ~ new_years_eve,
x = ~ date,
name = 'new_years_eve',
color = color_palette()[2]) %>%
add_bars(y = ~ year_2019,
x = ~ date,
name = 'year_2019',
color = color_palette()[3]) %>%
layout(yaxis = list(title = 'value'),
title = 'Seasonality Variables',
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
model = run_model(data = data,
dv = 'ecommerce',
ivs = c('covid', 'christmas', 'trend','month_Dec'))
summary(model)
decomposition = decomping(
model = model,
raw_data = data,
id_var = 'date'
)
decomposition %>%
decomp_chart()
id_var = 'date)
model = run_model(data = data,
dv = 'ecommerce',
model = run_model(data = data,
dv = 'ecommerce',
ivs = c('covid', 'christmas', 'trend','month_Dec'),
id_var = 'date')
summary(model)
decomposition = decomping(
model = model
)
decomposition %>%
decomp_chart()
decomposition = decomping(
model = model
)
decomposition %>%
decomp_chart()
model %>%
decomp_chart()
raw_variable = data$online_media
dates = data$date
plot_ly() %>%
add_lines(y = raw_variable, x = dates, name = 'raw') %>%
add_lines(y = decay(raw_variable, decay = 0.5),
x = dates,
name = 'transformed: decay 50%') %>%
add_lines(y = decay(raw_variable, decay = 0.75),
x = dates,
name = 'transformed: decay 75%') %>%
add_lines(y = decay(raw_variable, decay = 0.95),
x = dates,
name = 'transformed: decay 95%') %>%
layout(title = 'decay',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
raw_variable = data$ecommerce
dates = data$date
plot_ly() %>%
add_lines(y = raw_variable, x = dates, name = 'raw') %>%
add_lines(
y = diminish(raw_variable, m = 0.3, abs = F),
x = dates,
name = 'transformed: diminish 30%',
yaxis = "y2"
) %>%
layout(title = 'diminish',
yaxis2 = list(overlaying = "y",
showgrid = F,
side = "right"),
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_trace(
x = raw_variable,
y = diminish(raw_variable,.3,F)
) %>%
layout(title = 'raw vs. diminished',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
knitr::opts_chunk$set(class.output = "output_style")
knitr::opts_chunk$set(class.source = "code_style")
# devtools::install('/Users/44751/Desktop/github/linea/other/FINAL_PKG/linea')
print(packageVersion("linea"))
library(linea) # the library in question
library(dplyr) # for pipes (%>%) and data manipulation
library(plotly) # for interactive charts
library(DT) # for interactive tables
# data_path = 'c:/Users/44751/Desktop/github/data/ecomm_data.csv'
data_path = 'https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv'
data = read_xcsv(file = data_path)
data %>%
datatable(rownames = NULL,
options = list(scrollX = TRUE))
model = run_model(data = data,
dv = 'ecommerce',
ivs = c('covid','christmas'),
id_var = 'date')
summary(model)
decomposition = model %>% decomping()
print(names(decomposition))
decomposition$variable_decomp %>%
datatable(rownames = NULL,
options = list(scrollX = T))
model %>%
decomp_chart()
decomposition$fitted_values %>%
datatable(rownames = NULL,
options = list(scrollX = T))
model %>%
fit_chart()
model %>%
acf_chart()
model %>%
resid_hist_chart()
model %>%
response_curves()
data = data %>%
get_seasonality(
date_col_name = 'date',
date_type = 'weekly ending')
data %>%
datatable(rownames = NULL,
options = list(scrollX = TRUE))
plot_ly(data) %>%
add_bars(y = ~ week_26,
x = ~ date,
name = 'week_26',
color = color_palette()[1]) %>%
add_bars(y = ~ new_years_eve,
x = ~ date,
name = 'new_years_eve',
color = color_palette()[2]) %>%
add_bars(y = ~ year_2019,
x = ~ date,
name = 'year_2019',
color = color_palette()[3]) %>%
layout(yaxis = list(title = 'value'),
title = 'Seasonality Variables',
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
model = run_model(data = data,
dv = 'ecommerce',
ivs = c('covid', 'christmas', 'trend','month_Dec'),
id_var = 'date')
summary(model)
model %>%
decomp_chart()
raw_variable = data$online_media
dates = data$date
plot_ly() %>%
add_lines(y = raw_variable, x = dates, name = 'raw') %>%
add_lines(y = decay(raw_variable, decay = 0.5),
x = dates,
name = 'transformed: decay 50%') %>%
add_lines(y = decay(raw_variable, decay = 0.75),
x = dates,
name = 'transformed: decay 75%') %>%
add_lines(y = decay(raw_variable, decay = 0.95),
x = dates,
name = 'transformed: decay 95%') %>%
layout(title = 'decay',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
raw_variable = data$ecommerce
dates = data$date
plot_ly() %>%
add_lines(y = raw_variable, x = dates, name = 'raw') %>%
add_lines(
y = diminish(raw_variable, m = 0.3, abs = F),
x = dates,
name = 'transformed: diminish 30%',
yaxis = "y2"
) %>%
layout(title = 'diminish',
yaxis2 = list(overlaying = "y",
showgrid = F,
side = "right"),
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_trace(
x = raw_variable,
y = diminish(raw_variable,.3,F)
) %>%
layout(title = 'raw vs. diminished',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
raw_variable = data$ecommerce
dates = data$date
plot_ly() %>%
add_lines(y = raw_variable, x = dates, name = 'raw') %>%
add_lines(
y = lag(raw_variable, n = 1),
x = dates,
name = 'transformed: lag 1',
) %>%
add_lines(
y = lag(raw_variable, n = 5),
x = dates,
name = 'transformed: lag 5',
) %>%
add_lines(
y = lag(raw_variable, n = 10),
x = dates,
name = 'transformed: lag 10',
)  %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)",
title = 'lag',
xaxis = list(showgrid = F))
raw_variable = data$black.friday
dates = data$date
plot_ly() %>%
add_lines(y = raw_variable, x = dates, name = 'raw') %>%
add_lines(
y = ma(raw_variable, width = 5),
x = dates,
name = 'transformed: ma 5',
) %>%
add_lines(
y = ma(raw_variable, width = 15),
x = dates,
name = 'transformed: ma 15',
) %>%
add_lines(
y = ma(raw_variable, width = 25),
x = dates,
name = 'transformed: ma 25',
) %>%
add_lines(
y = ma(raw_variable, width = 25,align = 'left'),
x = dates,
name = 'transformed: lag 25 left',
) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)",
xaxis = list(showgrid = F),
title='ma')
model_table = build_model_table(ivs =  c('covid','christmas','trend'))
model_table %>%
datatable(rownames = NULL,
options = list(scrollX = T,
dom = "t"))
model_table = model_table %>%
mutate(dim_rets = if_else(variable ==  'covid',10,diminish)) %>%
mutate(decay = if_else(variable ==  'covid',.5,decay))
model_table = model_table %>%
mutate(diminish = if_else(variable ==  'covid',10,diminish)) %>%
mutate(decay = if_else(variable ==  'covid',.5,decay))
model_table = model_table %>%
mutate(diminish = if_else(variable ==  'covid','10',diminish)) %>%
mutate(decay = if_else(variable ==  'covid','.5',decay))
model_table %>%
datatable(rownames = NULL,
options = list(scrollX = T,
dom = "t"))
model = run_model(data = data,
dv = 'ecommerce',
model_table = model_table)
model %>%
response_curves(
x_min = 0,
x_max = 10,
y_min = 0,
y_max = 20000,
interval = 0.01
)
model = run_model(data = data,
dv = 'ecommerce',
model_table = model_table)
model %>%
response_curves(
x_min = 0,
x_max = 20,
y_min = 0,
y_max = 20000,
interval = 0.01
)
model = run_model(data = data,
dv = 'ecommerce',
model_table = model_table)
model %>%
response_curves(
x_min = 0,
x_max = 30,
y_min = 0,
y_max = 20000,
interval = 0.01
)
model %>%
what_next(data = data) %>%
datatable(rownames = NULL)
model %>%
what_next() %>%
datatable(rownames = NULL)
model %>%
what_trans(raw_data = data,
dim_rets = '0.1,0.2,0.5,1,5,10,100,1000',
decay = '0.25,0.5,0.75',
iv='offline_media') %>%
datatable(rownames = NULL)
trans_df = data.frame(
name = c('diminish', 'decay', 'lag', 'ma'),
func = c(
'linea::diminish(x,a)',
'linea::decay(x,a)',
'linea::lag(x,a)',
'linea::ma(x,a)'
),
order = 1:4
) %>%
dplyr::mutate(val = '') %>%
dplyr::mutate(val = dplyr::if_else(condition = name == 'diminish',
'0.5,1,10,100,1000',
val))
trans_df %>%
datatable(rownames = NULL)
trans_df = data.frame(
name = c('diminish', 'decay', 'lag', 'ma'),
func = c(
'linea::diminish(x,a)',
'linea::decay(x,a)',
'linea::lag(x,a)',
'linea::ma(x,a)'
),
order = 1:4
) %>%
dplyr::mutate(val = '') %>%
dplyr::mutate(val = dplyr::if_else(condition = name == 'diminish',
'0.5,1,10,100,1000',
val))
trans_df %>%
datatable(rownames = NULL)
model %>%
what_trans(trans_df = trans_df,
variable ='offline_media') %>%
datatable(rownames = NULL)
data = data %>%
gt_f(kw = 'trump',append = T)
data = data %>%
gt_f(kw = 'ramadan',append = T) %>%
gt_f(kw = 'trump',append = T) %>%
gt_f(kw = 'covid',append = T)
categories = data.frame(
variable = names(model$coefficients),
category = c('Base','covid','seasonality','Base'),
calc = rep('none',4)
)
decomposition = decomping(
model = model,
categories = categories,
raw_data = data,
id_var = 'date'
)
decomposition %>%
decomp_chart(variable_decomp = F)
knitr::opts_chunk$set(class.output = "output_style")
knitr::opts_chunk$set(class.source = "code_style")
# devtools::install('/Users/44751/Desktop/github/linea/other/FINAL_PKG/linea')
print(packageVersion("linea"))
library(linea) # the library in question
library(dplyr) # for pipes (%>%) and data manipulation
library(plotly) # for interactive charts
library(DT) # for interactive tables
# data_path = 'c:/Users/44751/Desktop/github/data/ecomm_data.csv'
data_path = 'https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv'
data = read_xcsv(file = data_path)
categories = data.frame(
variable = names(model$coefficients),
category = c('Base','covid','seasonality','Base'),
calc = rep('none',4)
)
model = run_model(
data = data,dv = 'ecommerce',
model_table = model_table,
categories = categories,
id_var = 'date'
)
model %>%
decomp_chart(variable_decomp = F)
data_path = 'c:/Users/44751/Desktop/github/data/ecomm_data.csv'
# data_path = 'https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv'
data = read_xcsv(file = data_path)
data %>%
datatable(rownames = NULL,
options = list(scrollX = TRUE))
?head
?run_model

) %>%
layout(title = 'raw vs. hill_function m:30%',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 20,k = 10)
) %>%
layout(title = 'raw vs. hill_function m:30%',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 20,k = 1)
) %>%
layout(title = 'raw vs. hill_function m:30%',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 20,k = 25)
) %>%
layout(title = 'raw vs. hill_function m:30%',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 25,k = 25)
) %>%
layout(title = 'raw vs. hill_function m:30%',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 50,k = 25)
) %>%
layout(title = 'raw vs. hill_function m:30%',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 5,k = 25)
) %>%
layout(title = 'raw vs. hill_function m:30%',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_lines(y = raw_variable, x = dates, name = 'raw') %>%
add_lines(
y = hill_function(raw_variable, m = 5,k = 25),
x = dates,
name = 'transformed: hill_function m = 5,k = 25',
yaxis = "y2"
) %>%
layout(title = 'diminish',
yaxis2 = list(overlaying = "y",
showgrid = F,
side = "right"),
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_lines(y = raw_variable, x = dates, name = 'raw') %>%
add_lines(
y = lag(raw_variable, n = 1),
x = dates,
name = 'transformed: lag 1',
) %>%
add_lines(
y = lag(raw_variable, n = 5),
x = dates,
name = 'transformed: lag 5',
) %>%
add_lines(
y = lag(raw_variable, n = 10),
x = dates,
name = 'transformed: lag 10',
)  %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)",
title = 'lag',
xaxis = list(showgrid = F))
lag
plot_ly() %>%
add_lines(y = raw_variable, x = dates, name = 'raw') %>%
add_lines(
y = lag(raw_variable, l = 1),
x = dates,
name = 'transformed: lag 1',
) %>%
add_lines(
y = lag(raw_variable, l = 5),
x = dates,
name = 'transformed: lag 5',
) %>%
add_lines(
y = lag(raw_variable, l = 10),
x = dates,
name = 'transformed: lag 10',
)  %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)",
title = 'lag',
xaxis = list(showgrid = F))
plot_ly() %>%
add_lines(y = raw_variable, x = dates, name = 'raw') %>%
add_lines(
y = ma(raw_variable, width = 5),
x = dates,
name = 'transformed: ma 5',
) %>%
add_lines(
y = ma(raw_variable, width = 15),
x = dates,
name = 'transformed: ma 15',
) %>%
add_lines(
y = ma(raw_variable, width = 25),
x = dates,
name = 'transformed: ma 25',
) %>%
add_lines(
y = ma(raw_variable, width = 25,align = 'left'),
x = dates,
name = 'transformed: lag 25 left',
) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)",
xaxis = list(showgrid = F),
title='ma')
# cran version
install.packages('linea')
install.packages("linea")
install.packages("linea")
linea::acf_chart
source("~/.active-rstudio-document", echo=TRUE)
plot_ly() %>% add_trace(
y = mtcars$mpg,
x = rownames(mtcars),
marker = list(color = 'black',
line = list(color = "white", width = 0.5)))
library(plotly)
plot_ly() %>% add_trace(
y = mtcars$mpg,
x = rownames(mtcars),
marker = list(color = 'black',
line = list(color = "white", width = 0.5)))
plot_ly() %>% add_trace(
y = mtcars$mpg,
x = rownames(mtcars),
marker = list(color = 'black',
line = list(color = "red", width = 0.5)))
plot_ly() %>% add_trace(
y = mtcars$mpg,
x = rownames(mtcars),
marker = list(color = 'black',
line = list(color = "red", width = 2)))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
plot_ly(data = my_tibble) %>%
add_trace(
type = 'bar',
x = ~week,
y = ~mins,
color = ~exercise,
marker = list(line = list(color = "black", width = 2)))
plot_ly(data = my_tibble) %>%
add_trace(
type = 'bar',
x = ~week,
y = ~mins,
color = ~exercise,
marker = list(line = list(color = "black", width = 5)))
shiny::runApp('C:/Users/44751/Desktop/github/r_linear_regression')
check_model_file
model_list = check_model_file(model_file = path, verbose = T)
path = '/Users/44751/Desktop/data-2022-05-18.xlsx'
model_list = check_model_file(model_file = path, verbose = T)
model_list
model['trans_df']
path = '/Users/44751/Desktop/model_file.xlsx'
model_list = check_model_file(model_file = path, verbose = T)
model_list
model_list$model_table
model$output_model_table
model_list
model_list$model_table
export_mode
export_model
remove.packages('linea')
devtools::install('/Users/44751/Desktop/github/linea/linea/')
devtools::install('c:/Users/44751/Desktop/github/linea/linea/')
setwd('/Users/44751/Desktop/github/linea/linea/')
dir()
devtools::install('')
devtools::install()
devtools::install_github('paladinic/linea')
shiny::runApp('C:/Users/44751/Desktop/github/r_linear_regression')
shiny::runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
linea::export_model()
linea::export_model
shiny::runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
mtcars
df = mtcars
df = mtcars %>% rownames_to_column('car')
df
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
model = run_model(data = mtcars,dv = 'mpg',ivs = c('cyl','wt'))
model
saved_model_table = model$output_model_table
saved_model_table %>%
filter(-variable_t)
saved_model_table
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
plot_ly() %>%
add_lines(y = raw_variable, x = dates, name = 'raw') %>%
add_lines(
y = hill_function(raw_variable, m = 5,k = 50),
x = dates,
name = 'transformed: hill_function m = 5,k = 50',
yaxis = "y2"
) %>%
layout(title = 'diminish',
yaxis2 = list(overlaying = "y",
showgrid = F,
side = "right"),
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
knitr::opts_chunk$set(class.output = "output_style")
knitr::opts_chunk$set(class.source = "code_style")
library(linea) # modelling
library(tidyverse) # data manipulation
library(plotly) # visualization
library(DT) # visualization
data_path = 'https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv'
data = read_xcsv(file = data_path)
data = data %>%
get_seasonality(date_col_name = 'date',date_type = 'weekly starting')
data %>%
datatable(rownames = NULL,
options = list(scrollX = TRUE))
raw_variable = data$online_media
dates = data$date
plot_ly() %>%
add_lines(y = raw_variable, x = dates, name = 'raw') %>%
add_lines(y = decay(raw_variable, decay = 0.5),
x = dates,
name = 'transformed: decay 50%') %>%
add_lines(y = decay(raw_variable, decay = 0.75),
x = dates,
name = 'transformed: decay 75%') %>%
add_lines(y = decay(raw_variable, decay = 0.95),
x = dates,
name = 'transformed: decay 95%') %>%
layout(title = 'decay',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
raw_variable = data$christmas
dates = data$date
plot_ly() %>%
add_lines(y = raw_variable, x = dates, name = 'raw') %>%
add_lines(
y = diminish(raw_variable, m = 0.3, abs = F),
x = dates,
name = 'transformed: diminish 30%',
yaxis = "y2"
) %>%
layout(title = 'diminish',
yaxis2 = list(overlaying = "y",
showgrid = F,
side = "right"),
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_lines(
x = raw_variable,
y = diminish(raw_variable,.25,F),
name = 'diminish 25%',
line = list(shape = "spline")
) %>%
add_lines(
x = raw_variable,
y = diminish(raw_variable,.5,F),
name = 'diminish 50%',
line = list(shape = "spline")
) %>%
add_lines(
x = raw_variable,
y = diminish(raw_variable,.75,F),
name = 'diminish 75%',
line = list(shape = "spline")
) %>%
layout(title = 'raw vs. diminished',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_trace(
x = raw_variable,
y = diminish(raw_variable,.5,F)
) %>%
layout(title = 'raw vs. diminished (m = 10%)',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_lines(y = raw_variable, x = dates, name = 'raw') %>%
add_lines(
y = hill_function(raw_variable, m = 5,k = 50),
x = dates,
name = 'transformed: hill_function m = 5,k = 50',
yaxis = "y2"
) %>%
layout(title = 'diminish',
yaxis2 = list(overlaying = "y",
showgrid = F,
side = "right"),
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 5,k = 50)
) %>%
layout(title = 'raw vs. hill_function m = 5,k = 50',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 1,k = 50),
name = 'm = 1,k = 50'
) %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 5,k = 50),
name = 'm = 5,k = 50'
) %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 10,k = 50),
name = 'm = 10,k = 50'
) %>%
layout(title = 'raw vs. hill_function',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 1,k = 50),
name = 'm = 1,k = 50'
) %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 2,k = 50),
name = 'm = 5,k = 50'
) %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 5,k = 50),
name = 'm = 5,k = 50'
) %>%
layout(title = 'raw vs. hill_function',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 1,k = 50),
name = 'm = 1,k = 50'
) %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 2,k = 50),
name = 'm = 2,k = 50'
) %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 5,k = 50),
name = 'm = 5,k = 50'
) %>%
layout(title = 'raw vs. hill_function',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 5,k = 10),
name = 'm = 5,k = 10'
) %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 5,k = 50),
name = 'm = 5,k = 50'
) %>%
add_trace(
x = raw_variable,
y = hill_function(raw_variable,m = 5,k = 100),
name = 'm = 5,k = 100'
) %>%
layout(title = 'raw vs. hill_function',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
# librarise
library(linea) # modelling
library(tidyverse) # data manipulation
library(plotly) # visualization
library(DT) # visualization
# fictitious ecommerce data
data_path = 'https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv'
# importing flat file
data = read_xcsv(file = data_path)
# adding seasonality variables
data = data %>%
get_seasonality(date_col_name = 'date',date_type = 'weekly starting')
# visualise data
data %>%
datatable(rownames = NULL,
options = list(scrollX = TRUE))
model_table = build_model_table(ivs = c('christmas','black.friday','trend','gtrends_prime day'))
model_table = build_model_table(ivs = c('christmas','black.friday','trend','gtrends_prime day'))
model_table %>%
datatable(rownames = NULL)
model_table = build_model_table(ivs = c('christmas','black.friday','trend','gtrends_prime day'))
model_table
model = run_model(dv = 'ecommerce',
ivs = c('christmas','black.friday','trend','gtrends_prime day'),
id_var = 'date')
summary(model)
model = run_model(data = data,
dv = 'ecommerce',
ivs = c('christmas','black.friday','trend','gtrends_prime day'),
id_var = 'date')
# librarise
library(linea) # modelling
library(tidyverse) # data manipulation
library(plotly) # visualization
library(DT) # visualization
# fictitious ecommerce data
data_path = 'https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv'
# importing flat file
data = read_xcsv(file = data_path)
# adding seasonality and Google trends variables
data = data %>%
get_seasonality(date_col_name = 'date',date_type = 'weekly starting') %>%
gt_f(kw = 'prime day',append = T)
# visualize data
data %>%
datatable(rownames = NULL,
options = list(scrollX = TRUE))
model_table = build_model_table(ivs = c('christmas','black.friday','trend','gtrends_prime day'))
model_table
model = run_model(data = data,
dv = 'ecommerce',
ivs = c('christmas','black.friday','trend','gtrends_prime day'),
id_var = 'date')
summary(model)
model = run_model(data = data,
dv = 'ecommerce',
ivs = c('christmas','black.friday','trend','gtrends_prime day'),
id_var = 'date')
summary(model)
model = run_model(data = data,
dv = 'ecommerce',
ivs = c('christmas','black.friday','trend','gtrends_prime day'),
id_var = 'date')
summary(model)
model %>%
what_next()
model = run_model(data = data,
dv = 'ecommerce',
ivs = c('christmas','black.friday','trend','gtrends_prime day','covid','offline_media'),
id_var = 'date')
summary(model)
model %>%
decomp_chart()
model %>%
response_curves()
model %>%
response_curves(
x_min = 0
)

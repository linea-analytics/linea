formula = build_formula(dv = model$dv, ivs = ivs_t)# run model
# print(var_t_name %in% colnames(data))
model_temp = lm(formula = formula,
data = data) %>% TRY()
print(model_temp)
# if model failed
if(is.null(model_temp)) {
# fill row with empty
row = list(0,0,0)
} else{
# get model summary
ms = summary(model_temp)
# generate row
coef = ms$coefficients[var_t_name, "Estimate"] %>%
TRY()
if(is.null(coef)){
adj_R2 = 0
t_stat = 0
coef = 0
}else{
adj_R2 = ms$adj.r.squared
t_stat = ms$coefficients[var_t_name, "t value"]
}
row = list(adj_R2,t_stat,coef)
output_df[i,(ncol(output_df)-2):(ncol(output_df))] = row
}
}
View(output_df)
# define output table to fill with loop
output_df = cbind(master_combo_df,tibble(
adj_R2 = 0,
t_stat = 0,
coef = 0
))
# test    ####
library(linea)
library(dplyr)
data = read_xcsv("https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv")
dv = 'ecommerce'
ivs = c('christmas','black.friday')
r2_diff = TRUE
model = run_model(data = data,dv = dv,ivs = ivs)
rm(dv,ivs)
trans_df = data.frame(
name = c('diminish', 'decay', 'lag', 'ma', 'log', 'hill', 'sin', 'exp'),
func = c(
'linea::diminish(x,a)',
'linea::decay(x,a)',
'linea::lag(x,a)',
'linea::ma(x,a)',
'log(x,a)',
"linea::hill_function(x,a,b,c)",
'sin(x*a)',
'(x^a)'
),
order = 1:8
) %>%
dplyr::mutate(offline_media = dplyr::if_else(condition = name == 'hill',
'(1,5,50),(1,5,50),( 1,5,50)',
'')) %>%
dplyr::mutate(online_media = dplyr::if_else(condition = name == 'diminish',
'.1,.5, 10 ',
'')) %>%
dplyr::mutate(online_media = dplyr::if_else(condition = name == 'decay',
'.1,.7 ',
online_media)) %>%
dplyr::mutate(promo = '')
# clean trans_df
trans_df = trans_df %>%
apply(2,function(x)gsub(' ', '',x)) %>%
as.data.frame() %>%
select(where(~!all(. == "")))
# get variables
vars = colnames(trans_df)
vars = vars[!(vars %in% c('name','order','func'))]
long_trans_df = list()
for(var in vars){
# var = vars[1]
ncols = max(stringr::str_count(trans_df[,var], "\\),\\(")) + 1
cols = letters[1:ncols]
temp_trans_df = tidyr::separate(fill = 'right',data = trans_df, col = var, into = cols, sep = "\\).\\(") %>%
zoo::na.fill('') %>%
as.data.frame() %>%
select(-vars[vars!=var])%>%
reshape2::melt(id.vars = c('name','order','func'),factorsAsStrings=FALSE) %>%
filter(value != '')  %>%
mutate(value = gsub(pattern = '\\(|\\)',replacement = '',x = value)) %>%
rename(parameter = variable) %>%
mutate(variable = var)
long_trans_df = rlist::list.append(long_trans_df,temp_trans_df)
}
long_trans_df = long_trans_df %>%
purrr::reduce(rbind)
# split each parameter (to be tested)
ncols = max(stringr::str_count(long_trans_df$value, ",")) + 1
cols = paste0('param_',1:ncols)
long_trans_df = long_trans_df %>%
tidyr::separate(fill = 'right', col = 'value', into = cols, sep = ",") %>%
zoo::na.fill('') %>%
as.data.frame()
# expand.grid for all combos of a single variable
long_combo_df = list()
for(var in vars){
temp_trans_df = long_trans_df %>%
filter(variable == var)
if(nrow(temp_trans_df)==0){
next
}
col_names = paste0(temp_trans_df$name,'_',temp_trans_df$parameter)
temp_trans_df = lapply(1:nrow(temp_trans_df),function(x){
v = temp_trans_df[x,] %>%
as.vector()
v = v[5:(length(v)-1)]
v = as.numeric(v[v!=''])
return(v)
}) %>%
expand.grid() %>%
zoo::na.fill('') %>%
as.data.frame() %>%
mutate(variable = var)
colnames(temp_trans_df)[1:length(col_names)] = col_names
long_combo_df = rlist::list.append(long_combo_df,temp_trans_df)
names(long_combo_df)[length(long_combo_df)] = var
}
# expand.grid for all combos across variables
master_combo_df = sapply(long_combo_df, function(x){1:nrow(x)}) %>%
expand.grid()
# define output table to fill with loop
output_df = cbind(master_combo_df,tibble(
adj_R2 = 0,
t_stat = 0,
coef = 0
))
# for each combo
## generate variable (OPTIMISE - do not create variables twice)
## generate model
for(i in 1:nrow(master_combo_df)){
# i = 1
print(paste0('i - ',i))
m = model$model_table
# for each var
for(var in vars){
# var = vars[1]
print(paste0('var - ',var))
var_t_name = var
data[,'temp_var'] = data[,var]
temp_trans_df = long_trans_df[long_trans_df$variable == var,]
if(nrow(temp_trans_df)==0){
next
}
fs_name = temp_trans_df %>% arrange(order) %>% pull(name) %>% unique()
fs = temp_trans_df %>% arrange(order) %>% pull(func) %>% unique()
# for each trans
for(j in 1:length(fs_name)){
# j = 1
print(paste0('j - ',j))
f_name = fs_name[j]
var_t_name = paste0(var_t_name,'_',f_name)
# print(var_t_name)
ps = temp_trans_df %>%
filter(name == f_name) %>%
arrange(parameter) %>%
pull(parameter)
vals = c()
# for each param
for(p in ps){
val = long_combo_df[[var]][master_combo_df[i,var],paste0(f_name,'_',p)]
vals = c(vals,val)
var_t_name = paste0(var_t_name,'_',val)
# print(var_t_name)
assign(p,val)
}
# m[1,f_name] = vals %>% paste0(collapse = ',')
f = fs[j]
if(model$normalise_by_pool){
for(g in groups){
# g=groups[1]
x = data$temp_var[data[,pool]==g]
x = f %>% run_text(env = environment())
data$temp_var[data[,pool]==g] = x
}
}else{
x = data$temp_var
x = f %>% run_text(env = environment())
data$temp_var = x
}
}
data[,var_t_name] = data[,'temp_var']
data[,'temp_var'] = NULL
# print('_______________')
m = m %>%
bind_rows(
tibble(
variable = var,
variable_t = var_t_name
)
) %>%
zoo::na.fill('') %>%
as.data.frame()
}
ivs_t = m %>% select(variable_t)
# build formula object
formula = build_formula(dv = model$dv, ivs = ivs_t)# run model
# print(var_t_name %in% colnames(data))
model_temp = lm(formula = formula,
data = data) %>% TRY()
print(model_temp)
# if model failed
if(is.null(model_temp)) {
# fill row with empty
row = list(0,0,0)
} else{
# get model summary
ms = summary(model_temp)
# generate row
coef = ms$coefficients[var_t_name, "Estimate"] %>%
TRY()
if(is.null(coef)){
adj_R2 = 0
t_stat = 0
coef = 0
}else{
adj_R2 = ms$adj.r.squared
t_stat = ms$coefficients[var_t_name, "t value"]
}
row = list(adj_R2,t_stat,coef)
output_df[i,(ncol(output_df)-2):(ncol(output_df))] = row
}
}
m0_adj_R2 = summary(model)$adj.r.squared
m0_adj_R2
output_df %>%
mutate(m0_adj_R2 = m0_adj_R2) %>%
mutate(adj_R2_diff = (adj_R2 - m0_adj_R2)/m0_adj_R2) %>%
select(-m0_adj_R2)
output_df = output_df %>%
mutate(m0_adj_R2 = m0_adj_R2) %>%
mutate(adj_R2_diff = (adj_R2 - m0_adj_R2)/m0_adj_R2) %>%
select(-m0_adj_R2)
library(shinydashboard)
library(shinydashboardPlus)
shiny::runApp('C:/Users/44751/Desktop/github/linea/lineapp')
runApp('C:/Users/44751/Desktop/github/linea/lineapp')
setwd('/Users/44751/Desktop/github/linea/linea/')
devtools::check()
usethis::use_cran_comments()
devtools::release()
runApp('C:/Users/44751/Desktop/github/linea/lineapp')
devtools::check()
devtools::check()
devtools::submit_cran()
devtools::check_rhub()
devtools::check()
devtools::submit_cran()
build_model_table(ivs = rep('',15))
df = build_model_table(ivs = rep('',15))
cols = colnames(df)
cols = cols[cols != 'variable']
cols
df = build_model_table(ivs = rep('',15))
cols = colnames(df)
cols = cols[cols != 'variable']
cols = c('variable',cols)
df = df[,cols]
df
runApp('C:/Users/44751/Desktop/github/linea/lineapp')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
m = import_model(path = '/Users/44751/Desktop/model_file.xlsx')
run_model(data = read_xcsv("https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv"),
dv = 'ecommerce',
ivs = c('christmas','black.friday'))
run_model(data = read_xcsv("https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv"),
dv = 'ecommerce',
ivs = c('christmas','black.friday'))
model = run_model(data = read_xcsv("https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv"),
dv = 'ecommerce',
ivs = c('christmas','black.friday'))
model %>% export_model(path = '/Users/44751/Desktop/model_file.xlsx',overwrite = TRUE)
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
m = import_model('/Users/44751/Desktop/model_file.xlsx')
m
m = import_model(path = '/Users/44751/Desktop/model_file.xlsx')
m
m = import_model(path = '/Users/44751/Desktop/model_file.xlsx')
path = '/Users/44751/Desktop/model_file.xlsx'
# import checked filed
model_list = check_model_file(model_file = path, verbose = verbose)
verbose = TRUE
# import checked filed
model_list = check_model_file(model_file = path, verbose = verbose)
model_list
# extract model settings (data,dv,ivs,etc...)
model_table = model_list$model_table %>%
zoo::na.fill('') %>%
as.data.frame()
categories = model_list$categories
dv = model_list$dv$variable
normalise_by_pool = model_list$normalise_by_pool$variable
meta_data = model_list$meta_data
id_var = model_list$id_var$variable
data = model_list$data %>% check_ts(date_col = id_var,verbose = verbose)
id_var
model_list$id_var
model
model$id_var
# extract model settings (data,dv,ivs,etc...)
model_table = model_list$model_table %>%
zoo::na.fill('') %>%
as.data.frame()
model_table
categories
dv
dv = model_list$dv$variable
dv
normalise_by_pool = model_list$normalise_by_pool$variable
normalise_by_pool
meta_data = model_list$meta_data
meta_data
id_var
id_var = model_list$id_var$variable
id_var
data = model_list$data %>% check_ts(date_col = id_var,verbose = verbose)
data
model = run_model(
data = data,
dv = dv,
model_table = model_table,
trans_df = trans_df,
meta_data = meta_data,
id_var = id_var,
verbose = verbose,
normalise_by_pool = normalise_by_pool,
categories = categories,
save_raw_data = TRUE,
decompose = TRUE
)
data
check_ts
data = model_list$data %>% check_ts(date_col = id_var,verbose = verbose)
data = model_list$data
data
model = run_model(
data = data,
dv = dv,
model_table = model_table,
trans_df = trans_df,
meta_data = meta_data,
id_var = id_var,
verbose = verbose,
normalise_by_pool = normalise_by_pool,
categories = categories,
save_raw_data = TRUE,
decompose = TRUE
)
trans_df
trans_df = model_list$trans_df
model
model = run_model(
data = data,
dv = dv,
model_table = model_table,
trans_df = trans_df,
meta_data = meta_data,
id_var = id_var,
verbose = verbose,
normalise_by_pool = normalise_by_pool,
categories = categories,
save_raw_data = TRUE,
decompose = TRUE
)
model
remove.packages('linea')
devtools::install_github('paladinic/linea')
devtools::install()
devtools::install('.')
devtools::install('/Users/44751/Desktop/github/linea/linea/')
devtools::install_github('paladinic/linea')
shiny::runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
get_seasonality
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
data = read_xcsv("https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv") %>%
get_seasonality(date_col_name = 'Week')
data
data = read_xcsv("https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv") %>%
get_seasonality(date_col_name = 'Week',verbose = TRUE)
data = read_xcsv("https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv")
data = read_xcsv("https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv") %>%
get_seasonality(date_col_name = 'date',verbose = TRUE)
data
dv = 'ecommerce'
ivs = c('trend')
data = read_xcsv("https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv") %>%
get_seasonality(date_col_name = 'date',verbose = TRUE)
dv = 'ecommerce'
ivs = c('trend')
model_tables = build_model_table(ivs = ivs)
model_tables
model_table = build_model_table(ivs = ivs)
m = run_model(data = data,
model_table = model_table,
dv = dv)
m
data.frame()
m = run_model(data = data,
model_table = model_table,
dv = dv,meta_data = data.frame())
m
devtools::install(pkg = '')
devtools::install(pkg = '',force = TRUE)
devtools::install(pkg = '.',force = TRUE)
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
shiny::runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
devtools::install(pkg = '.',force = TRUE)
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
shiny::runApp('C:/Users/44751/Desktop/github/r_linear_regression')
getwd()
devtools::check()
devtools::install(pkg = '.',force = TRUE)
linea::default_trans_df()
linea::default_trans_df()
devtools::install(pkg = '.',force = TRUE)
linea::default_trans_df()
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
m = run_model(data = mtcars,ivs = 'cyl',dv = 'mpg')
m$output_model_table
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
shiny::runApp('C:/Users/44751/Desktop/github/r_linear_regression')
fit_chart
fit_chart
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
run_model(data = mtcars,dv = 'mpg',ivs = 'cyl')
runApp('C:/Users/44751/Desktop/github/r_linear_regression') %>% fit_chart()
runApp('C:/Users/44751/Desktop/github/r_linear_regression') %>% fit_chart()
run_model(data = mtcars,dv = 'mpg',ivs = 'cyl') %>% fit_chart()
library(linea)
# libraries         --------------------------------------------------------------------
library(colourpicker)
library(countrycode)
library(DT)
library(gargle)
library(googledrive)
library(gtrendsR)
library(lubridate)
library(plotly)
library(polished)
library(polishedpayments)
library(linea)
library(readxl)
library(reshape2)
library(rhandsontable)
library(rlist)
library(shiny)
library(shinycssloaders)
library(shinyjs)
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(sjmisc)
library(tibble)
library(tidyverse)
library(tis)
library(zoo)
run_model(data = mtcars,dv = 'mpg',ivs = 'cyl') %>% fit_chart()
m = run_model(data = mtcars,dv = 'mpg',ivs = 'cyl')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
run_model
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
gc()
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
response_curves
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/linea/lineapp')
check_model_file
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
funk_sum = function(a,b){
a + b
}
funk_sum(1,2)
funk_sum(1,20000000)
funk_sum(1,20000000)
funk_sum(1,20000000)
funk_sum(1,20000000)
funk_sum(1,20000000)
funk_sum(1,20000000)
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/linea/lineapp')

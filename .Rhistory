name = 'm = 5,k = 50'
) %>%
add_lines(
line = list(shape = "spline"),
x = raw_variable,
y = hill_function(raw_variable,m = 5,k = 75),
name = 'm = 5,k = 75'
) %>%
layout(title = 'raw vs. hill_function (k)',
xaxis = list(showgrid = F),
plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)")
plot_ly() %>%
add_lines(y = raw_variable, x = dates, name = 'raw') %>%
add_lines(
y = linea::lag(raw_variable, l = 5),
x = dates,
name = 'transformed: lag 5',
) %>%
add_lines(
y = linea::lag(raw_variable, l = 10),
x = dates,
name = 'transformed: lag 10',
) %>%
add_lines(
y = linea::lag(raw_variable, l = 20),
x = dates,
name = 'transformed: lag 20',
)  %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)",
title = 'lag',
xaxis = list(showgrid = F))
plot_ly() %>%
add_lines(y = raw_variable, x = dates, name = 'raw') %>%
add_lines(
y = ma(raw_variable, width = 5),
x = dates,
name = 'transformed: ma 5',
) %>%
add_lines(
y = ma(raw_variable, width = 15),
x = dates,
name = 'transformed: ma 15',
) %>%
add_lines(
y = ma(raw_variable, width = 25),
x = dates,
name = 'transformed: ma 25',
) %>%
add_lines(
y = ma(raw_variable, width = 25,align = 'left'),
x = dates,
name = 'transformed: lag 25 left',
) %>%
add_lines(
y = ma(raw_variable, width = 25,align = 'right'),
x = dates,
name = 'transformed: lag 25 right',
) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)",
xaxis = list(showgrid = F),
title='ma')
ivs =  c('covid','christmas','trend')
model_table = build_model_table(ivs =  ivs)
model_table %>%
datatable(rownames = NULL,
options = list(scrollX = T,
dom = "t"))
model_table = model_table %>%
mutate(hill = if_else(variable ==  'covid','10,1',hill)) %>%
mutate(decay = if_else(variable ==  'covid','.5',decay))
model_table %>%
datatable(rownames = NULL,
options = list(scrollX = T,
dom = "t"))
dv = 'ecommerce'
model = run_model(data = data,
dv = dv,
model_table = model_table)
model %>%
response_curves(
x_min = 0,
x_max = 30,
y_min = 0,
y_max = 20000,
interval = 0.01
)
trans_df = default_trans_df()
trans_df %>%
datatable(rownames = NULL,
options = list(scrollX = T,
dom = "t"))
trans_df = trans_df %>%
rbind(c('custom_1','sin(x*a)',5))
trans_df %>%
datatable(rownames = NULL,
options = list(scrollX = T,
dom = "t"))
model_table = build_model_table(ivs = ivs,
trans_df = trans_df) %>%
mutate(custom_1 = if_else(variable == 'christmas','0.5',''))
model_table %>%
datatable(rownames = NULL)
model = run_model(data = data,
dv = dv,
model_table = model_table,
trans_df = trans_df)
model %>%
response_curves(
x_min = 0,
x_max = 30,
y_min = -20000,
y_max = 20000,
interval = 0.01
)
trans_df = data.frame(
name = c('diminish', 'decay', 'lag', 'ma'),
func = c(
'linea::diminish(x,a)',
'linea::decay(x,a)',
'linea::lag(x,a)',
'linea::ma(x,a)'
),
order = 1:4,
val = c('0.5,10,100,1000,10000','0,0.5,0.8','','')
)
trans_df %>%
datatable(rownames = NULL)
model %>%
what_trans(trans_df = trans_df,
variable ='offline_media') %>%
datatable(rownames = NULL)
trans_df = data.frame(
name = c('diminish', 'decay', 'hill', 'exp'),
func = c(
'linea::diminish(x,a)',
'linea::decay(x,a)',
"linea::hill_function(x,a,b,c)",
'(x^a)'
),
order = 1:4
) %>%
dplyr::mutate(offline_media = dplyr::if_else(condition = name == 'hill',
'(1,50),(1),(1,100)',
'')) %>%
dplyr::mutate(online_media = dplyr::if_else(condition = name == 'decay',
'.1,.7 ',
'')) %>%
dplyr::mutate(promo = '')
trans_df %>%
datatable(rownames = NULL)
combinations = what_combo(model = model,trans_df = trans_df)
check_trans_df
#'                                               '.1,.7 ',
#'                                               '')) %>%
#'   dplyr::mutate(promo = '')
#'
#' model = run_model(data = data,dv = dv,ivs = ivs, trans_df = trans_df)
#'
#' combos = what_combo(model = model,trans_df = trans_df)
#'
#' #using the trans_df, data, and dv
#' what_combo(trans_df = trans_df, data = data, dv = dv)
what_combo = function(model = NULL,
trans_df = NULL,
data = NULL,
dv = NULL,
r2_diff = TRUE,
return_model_objects = FALSE,
verbose = FALSE) {
# TODO
# - trans_df columns
# - check vars are in data
# - dv in data
# checks  ####
if (!is.logical(verbose)) {
message("Warning: verbose provided mus be logical (TRUE or FALSE). Setting to False.")
verbose = FALSE
}
if (!is.logical(r2_diff)) {
if (verbose)
message("Warning: r2_diff provided mus be logical (TRUE or FALSE). Setting to TRUE.")
r2_diff = TRUE
}
if (!is.logical(return_model_objects)) {
if (verbose)
message("Warning: return_model_objects provided mus be logical (TRUE or FALSE). Setting to TRUE.")
return_model_objects = TRUE
}
if (is.null(trans_df)) {
message("Error: trans_df must be provided. Returning NULL.")
return(NULL)
}
# check if model or dv and data are provided is correct
if (is.null(model)) {
if (is.null(dv) | is.null(data)) {
message("Error: model or dv and data must be provided. Returning NULL.")
return(NULL)
} else{
model_null = TRUE
vars = colnames(trans_df)
vars = vars[!(vars %in% c('name', 'order', 'func','ts'))]
model = run_model(dv = dv,
data = data,
ivs = vars)
}
} else{
model_null = FALSE
if (!is(model,class2 = 'lm')) {
message("Error: model must be of type 'lm'. Returning NULL.")
return(NULL)
}
else{
dv = model$dv
if (!is.null(dv)) {
if (verbose) {
message('Warning: replacing dv provided as argument with model dv.')
}
}
if (is.null(data)) {
data = model$data
}
}
}
model_table = model$model_table
# check pool
if (model$normalise_by_pool) {
meta_data = model$meta_data
pool = meta_data$variable[toupper(meta_data$meta) == 'POOL']
groups = data %>%
pull(!!sym(pool)) %>%
unique()
data = apply_normalisation(
raw_data = data,
# model_table =  model$model_table,
meta_data = model$meta_data,
dv = model$dv,
verbose = verbose
)
# check norm_data
if (length(data) == 2) {
pool_mean = data$pool_mean
data = data$data
}
}
data = apply_transformation(
data = data,
model_table = model$model_table,
trans_df = model$trans_df,
meta_data = model$meta_data,
verbose = verbose
)
# process ####
# clean trans_df
trans_df = trans_df %>%
check_trans_df() %>%
apply(2, function(x)
gsub(' ', '', x)) %>%
as.data.frame() %>%
discard(~all(is.na(.) | . ==""))
# get variables
vars = colnames(trans_df)
vars = vars[!(vars %in% c('name', 'order', 'func','ts'))]
if(return_model_objects){
model_list = list()
}
long_trans_df = list()
for (var in vars) {
# var = vars[1]
ncols = max(stringr::str_count(trans_df[, var], "\\),\\(")) + 1
cols = letters[1:ncols]
temp_trans_df = tidyr::separate(
fill = 'right',
data = trans_df,
col = var,
into = cols,
sep = "\\).\\("
) %>%
zoo::na.fill('') %>%
as.data.frame() %>%
select(-vars[vars != var]) %>%
reshape2::melt(id.vars = c('name', 'order', 'func','ts'),
factorsAsStrings = FALSE) %>%
filter(value != '')  %>%
mutate(value = gsub(
pattern = '\\(|\\)',
replacement = '',
x = value
)) %>%
rename(parameter = variable) %>%
mutate(variable = var)
long_trans_df = append(long_trans_df, list(temp_trans_df))
}
long_trans_df = long_trans_df %>%
Reduce(f = rbind)
# split each parameter (to be tested)
ncols = max(stringr::str_count(long_trans_df$value, ",")) + 1
cols = paste0('param_', 1:ncols)
long_trans_df = long_trans_df %>%
tidyr::separate(
fill = 'right',
col = 'value',
into = cols,
sep = ","
) %>%
zoo::na.fill('') %>%
as.data.frame()
# expand.grid for all combos of a single variable
long_combo_df = list()
for (var in vars) {
# var = vars[1]
temp_trans_df = long_trans_df %>%
filter(variable == var)
if (nrow(temp_trans_df) == 0) {
next
}
col_names = paste0(temp_trans_df$name, '_', temp_trans_df$parameter)
temp_trans_df = lapply(1:nrow(temp_trans_df), function(x) {
v = temp_trans_df[x, ] %>%
as.vector()
v = v[!(names(v) %in% c('name','order','func','ts','parameter','variable'))]
v = as.numeric(v[v != ''])
return(v)
}) %>%
expand.grid() %>%
zoo::na.fill('') %>%
as.data.frame() %>%
mutate(variable = var)
colnames(temp_trans_df)[1:length(col_names)] = col_names
long_combo_df =  append(long_combo_df, list(temp_trans_df))
names(long_combo_df)[length(long_combo_df)] = var
}
# expand.grid for all combos across variables
output_df = lapply(long_combo_df, function(x) {
1:nrow(x)
}) %>%
expand.grid()
# define output table to fill with loop
output_df = cbind(output_df, tibble(
adj_R2 = 0,
t_stat = 0,
coef = 0
))
# for each combo
## generate variable
## generate model
for (i in 1:nrow(output_df)) {
# i = 2
m = model$model_table
if(model_null){
m = m[0,]
}
# for each var
for (var in vars) {
# var = vars[1]
# print(paste0('var - ',var))
var_t_name = var
data[, 'temp_var'] = data[, var]
temp_trans_df = long_trans_df[long_trans_df$variable == var, ]
if (nrow(temp_trans_df) == 0) {
next
}
fs_name = temp_trans_df %>% arrange(order) %>% pull(name) %>% unique()
fs = temp_trans_df %>% arrange(order) %>% pull(func) %>% unique()
# for each trans
for (j in 1:length(fs_name)) {
# j = 1
# print(paste0('j - ',j))
f_name = fs_name[j]
ps = temp_trans_df %>%
filter(name == f_name) %>%
arrange(parameter) %>%
pull(parameter)
vals = c()
e <- new.env()
# for each param
for (p in ps) {
val = long_combo_df[[var]][output_df[i, var], paste0(f_name, '_', p)]
vals = c(vals, val)
# print(var_t_name)
assign(p,val,envir = e)
}
var_t_name = paste0(var_t_name, '_', f_name, '_', paste0(vals,collapse = ','))
f = fs[j]
if (model$normalise_by_pool) {
for (g in groups) {
# g=groups[1]
x = data$temp_var[data[, pool] == g]
assign('x',x,envir = e)
x = f %>% run_text(env = e)
data$temp_var[data[, pool] == g] = x
}
} else{
x = data$temp_var
assign('x',x,envir = e)
x = f %>% run_text(env = e)
data$temp_var = x
}
}
data[, var_t_name] = data[, 'temp_var']
data[, 'temp_var'] = NULL
# print('_______________')
m = m %>%
bind_rows(tibble(variable = var,
variable_t = var_t_name)) %>%
zoo::na.fill('') %>%
as.data.frame()
}
ivs_t = m %>% select(variable_t)
# build formula object
formula = build_formula(dv = model$dv, ivs = ivs_t)# run model
# print(var_t_name %in% colnames(data))
model_temp = lm(formula = formula,
data = data) %>% TRY()
if(return_model_objects){
model_list =  append(model_list,model_temp)
}
# print(model_temp)
# if model failed
if (is.null(model_temp)) {
# fill row with empty
row = list(0, 0, 0)
} else{
# get model summary
ms = summary(model_temp)
# drop back ticks
# ...added because the var names have special characters
rownames(ms$coefficients) = gsub(x =rownames(ms$coefficients),pattern = '`',replacement = '')
# generate row
coef = ms$coefficients[var_t_name, "Estimate"] %>%
TRY()
if (is.null(coef)) {
adj_R2 = 0
t_stat = 0
coef = 0
} else{
adj_R2 = ms$adj.r.squared
t_stat = ms$coefficients[var_t_name, "t value"]
}
row = list(adj_R2, t_stat, coef)
output_df[i, (ncol(output_df) - 2):(ncol(output_df))] = row
}
}
# TODO: OPTIMISE above
# - do not create variables more than once (check)
# - ...also for partial transformations (e.g. x_t1, x_t1_t2, x_t1_t3)
if (r2_diff) {
m0_adj_R2 = summary(model)$adj.r.squared
output_df = output_df %>%
mutate(m0_adj_R2 = m0_adj_R2) %>%
mutate(adj_R2_diff = (adj_R2 - m0_adj_R2) / m0_adj_R2) %>%
select(-m0_adj_R2)
}
ordered = order(output_df$adj_R2,decreasing = T)
output_df = output_df[ordered,]
if(return_model_objects){
model_list = model_list[ordered]
combos = list(results = output_df,
trans_parameters = long_combo_df,
variables = vars,
long_trans_df = long_trans_df,
model_list = model_list)
}else{
combos = list(results = output_df,
trans_parameters = long_combo_df,
long_trans_df = long_trans_df,
variables = vars)
}
return(combos)
}
trans_df = data.frame(
name = c('diminish', 'decay', 'hill', 'exp'),
func = c(
'linea::diminish(x,a)',
'linea::decay(x,a)',
"linea::hill_function(x,a,b,c)",
'(x^a)'
),
order = 1:4
) %>%
dplyr::mutate(offline_media = dplyr::if_else(condition = name == 'hill',
'(1,50),(1),(1,100)',
'')) %>%
dplyr::mutate(online_media = dplyr::if_else(condition = name == 'decay',
'.1,.7 ',
'')) %>%
dplyr::mutate(promo = '')
trans_df %>%
datatable(rownames = NULL)
combinations = what_combo(model = model,trans_df = trans_df)
names(combinations)
combinations$results %>%
datatable(rownames = NULL)
combinations$trans_parameters
library(devtools)
install()
install('/Users/44751/Desktop/github/linea/linea')
getwd()
setwd('/Users/44751/Desktop/github/linea/linea/')
library(devtools)
install()
check()
devtools::submit_cran()
read_csv
remove.packages('colorspace')
remove.packages('vctrs')
library(linea)
data = read_xcsv("https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv") %>%
gt_f(kw = 'covid') %>%
gt_f(kw = 'bitcoin')

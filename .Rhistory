add_lines(
y = ma(raw_variable, width = 15),
x = dates,
name = 'transformed: ma 15',
) %>%
add_lines(
y = ma(raw_variable, width = 25),
x = dates,
name = 'transformed: ma 25',
) %>%
add_lines(
y = ma(raw_variable, width = 25,align = 'left'),
x = dates,
name = 'transformed: lag 25 left',
) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)",
xaxis = list(showgrid = F),
title='ma')
# cran version
install.packages('linea')
install.packages("linea")
install.packages("linea")
linea::acf_chart
source("~/.active-rstudio-document", echo=TRUE)
plot_ly() %>% add_trace(
y = mtcars$mpg,
x = rownames(mtcars),
marker = list(color = 'black',
line = list(color = "white", width = 0.5)))
library(plotly)
plot_ly() %>% add_trace(
y = mtcars$mpg,
x = rownames(mtcars),
marker = list(color = 'black',
line = list(color = "white", width = 0.5)))
plot_ly() %>% add_trace(
y = mtcars$mpg,
x = rownames(mtcars),
marker = list(color = 'black',
line = list(color = "red", width = 0.5)))
plot_ly() %>% add_trace(
y = mtcars$mpg,
x = rownames(mtcars),
marker = list(color = 'black',
line = list(color = "red", width = 2)))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
plot_ly(data = my_tibble) %>%
add_trace(
type = 'bar',
x = ~week,
y = ~mins,
color = ~exercise,
marker = list(line = list(color = "black", width = 2)))
plot_ly(data = my_tibble) %>%
add_trace(
type = 'bar',
x = ~week,
y = ~mins,
color = ~exercise,
marker = list(line = list(color = "black", width = 5)))
shiny::runApp('C:/Users/44751/Desktop/github/r_linear_regression')
hill_function(c(1,0,0,0,10,0,0,0,20), m=1)
hill_function(c(1,0,0,0,10,0,0,0,20), m=1) %>% plot()
hill_function(c(1,0,0,0,10,0,0,0,20), k=10) %>% plot()
dv = NULL
r2_diff = TRUE
verbose = FALSE
if (!is.logical(verbose)) {
cat("Warning: verbose provided mus be logical (TRUE or FALSE). Setting to False. \n")
verbose = FALSE
}
if (!is.logical(r2_diff)) {
if (verbose)
cat("Warning: r2_diff provided mus be logical (TRUE or FALSE). Setting to TRUE. \n")
r2_diff = TRUE
}
if (is.null(trans_df)) {
cat("Error: trans_df must be provided. Returning NULL. \n")
return(NULL)
}
# check if model or dv and data are provided is correct
if (is.null(model)) {
if (is.null(dv) | is.null(data)) {
cat("Error: model or dv and data must be provided. Returning NULL. \n")
return(NULL)
} else{
vars = colnames(trans_df)
vars = vars[!(vars %in% c('name', 'order', 'func'))]
model = run_model(dv = dv,
data = data,
ivs = vars)
}
} else{
if (!is(model,class2 = 'lm')) {
cat("Error: model must be of type 'lm'. Returning NULL. \n")
return(NULL)
}
else{
if (!is.null(dv)) {
if (verbose) {
cat('Warning: replacing dv provided as argument with model dv. \n')
}
}
if (!is.null(data)) {
if (verbose) {
cat('Warning: replacing data provided as argument with model data. \n')
}
}
}
}
dv = model$dv
model_table = model$model_table
data = model$data
# check pool
if (model$normalise_by_pool) {
meta_data = model$meta_data
pool = meta_data$variable[toupper(meta_data$meta) == 'POOL']
groups = data %>%
pull(!!sym(pool)) %>%
unique()
data = apply_normalisation(
raw_data = data,
# model_table =  model$model_table,
meta_data = model$meta_data,
dv = model$dv,
verbose = verbose
)
# check norm_data
if (length(data) == 2) {
pool_mean = data$pool_mean
data = data$data
}
}
data = apply_transformation(
data = data,
model_table = model$model_table,
trans_df = model$trans_df,
meta_data = model$meta_data,
verbose = verbose
)
# clean trans_df
trans_df = trans_df %>%
apply(2, function(x)
gsub(' ', '', x)) %>%
as.data.frame() %>%
discard(~all(is.na(.) | . ==""))
dv = NULL
r2_diff = TRUE
verbose = FALSE
source("C:/Users/44751/Desktop/github/linea/playground/combo hot.R", echo=TRUE)
shiny::runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
library(shiny)
install.packages("shinyTime")
library(shinyTime)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
install.packages('tidygeocoder')
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
runApp('C:/Users/44751/Desktop/github/istrology')
runApp('C:/Users/44751/Desktop/github/istrology')
runApp('C:/Users/44751/Desktop/github/istrology')
runApp('C:/Users/44751/Desktop/github/istrology')
runApp('C:/Users/44751/Desktop/github/istrology')
linea::TRY
runApp('C:/Users/44751/Desktop/github/istrology')
runApp('C:/Users/44751/Desktop/github/istrology')
runApp('C:/Users/44751/Desktop/github/istrology')
runApp('C:/Users/44751/Desktop/github/istrology')
map = map %>%
addCircleMarkers(
lng = coords$long,
lat = coords$lat,
label = coords$address,
color = 'black'
)
# istrology
rsconnect::deployApp(appDir = '/Users/44751/Desktop/github/istrology/',appName = "istrology")
runApp('C:/Users/44751/Desktop/github/istrology')
library(shinycssloaders)
runApp('C:/Users/44751/Desktop/github/istrology')
# istrology
rsconnect::deployApp(appDir = '/Users/44751/Desktop/github/istrology/',appName = "istrology")
shiny::runApp('C:/Users/44751/Desktop/github/istrology')
# istrology
rsconnect::deployApp(appDir = '/Users/44751/Desktop/github/istrology/',appName = "istrology")
runApp('C:/Users/44751/Desktop/github/istrology')
runApp('C:/Users/44751/Desktop/github/istrology')
# istrology
rsconnect::deployApp(appDir = '/Users/44751/Desktop/github/istrology/',appName = "istrology")
runApp('C:/Users/44751/Desktop/github/istrology')
runApp('C:/Users/44751/Desktop/github/istrology')
# istrology
rsconnect::deployApp(appDir = '/Users/44751/Desktop/github/istrology/',appName = "istrology")
shiny::runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
linea::response_curves
library(shiny)
library(plotly)
dataset <- mtcars
ui <- shinyUI(pageWithSidebar(
headerPanel("Mtcars"),
sidebarPanel(sliderInput('sampleSize', 'Sample Size', min=10, max=nrow(dataset),
value=min(10, nrow(dataset)), step=5, round=0),
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset))),
checkboxInput('smooth', 'Smooth'),
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset))),
hr(),
checkboxInput("plotly1", "Interactive plot!",value = FALSE, width=140),
actionButton("plot", "Plot!")
),
mainPanel(
plotOutput('plot', click = "plot_click",
hover = hoverOpts(id = "plot_hover", delayType = "throttle"),
brush = brushOpts(id = "plot_brush")),
tableOutput("plot_brushedpoints")
)
))
server<- shinyServer(function(input, output) {
dataset <- reactive( { mtcars[sample(nrow(mtcars), input$sampleSize),] })
gragh <- reactive({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
if (input$smooth)
p <- p + geom_smooth()
p
}) |> bindEvent(input$plot)
output$plot <- renderPlot({
gragh()
})
output$plot_brushedpoints <- renderTable({
df<- mtcars
res <- brushedPoints(df, input$plot_brush, "x", "y",allRows = TRUE)
if (nrow(res) == 0|is.null(res))
return(NULL)
res
})
})
source("~/.active-rstudio-document", echo=TRUE)
model = run_model(data = scale(mtcars) %>% data.frame(),dv = 'mpg',ivs = c('wt','cyl','disp'))
library(linea)
model = run_model(data = scale(mtcars) %>% data.frame(),dv = 'mpg',ivs = c('wt','cyl','disp'))
model %>%
response_curves()
model$model
response_curves = function (model, x_min = -100, x_max = 100, y_min = -100, y_max = 100,
interval = 0.1, trans_only = FALSE, colors = color_palette(),
verbose = FALSE, table = FALSE,points = TRUE) {
# checks  ####
if (is.null(x_max)) x_max = 1e+05
if (is.null(x_min)) x_min = 0
if (is.null(interval)) interval = x_max/1000
if (is.null(y_max)) y_max = x_max
if (is.null(y_min)) y_min = x_min
# process ####
optim_table = model$output_model_table
trans_df = model$trans_df
if (trans_only) {
optim_table = optim_table[!(((optim_table[trans_df$name] ==
"") %>% data.frame() %>% rowSums()) == nrow(trans_df)),
]
}
optim_table = optim_table %>% filter(variable != "(Intercept)")
optim_table = optim_table[c("variable", "variable_t",
trans_df$name, "coef")] %>% na.omit()
if (nrow(optim_table) == 0) {
if (verbose)
print("All trans in model_table are blank.")
return(plot_ly())
}
curves_df = list()
x_raw = seq(x_min, x_max, interval)
for (i in 1:nrow(optim_table)) {
var = optim_table$variable_t[i]
coef = optim_table$coef[i]
x = x_raw
for (j in 1:nrow(model$trans_df)) {
t_name = model$trans_df$name[j]
t_func = model$trans_df$func[j]
param_vals = model$output_model_table %>% filter(variable_t ==
var) %>% pull(!!sym(t_name)) %>% strsplit(split = ",")
param_vals = param_vals[[1]] %>% as.numeric()
if (length(param_vals) == 0) {
next
}
param_names = letters[1:length(param_vals)]
e <- new.env()
for (k in 1:length(param_vals)) {
p_name = param_names[k]
p_val = param_vals[k]
assign(p_name, p_val, envir = e)
}
x = t_func %>% run_text(env = e)
}
curves_df = list.append(curves_df, data.frame(value = x *
coef, variable = var, x = x_raw) %>% mutate(value = as.numeric(value)) %>%
mutate(variable = as.character(variable)) %>% mutate(x = as.numeric(x)))
}
curves_df = curves_df %>% purrr::reduce(rbind) %>% filter(value >=
y_min) %>% filter(value <= y_max)
if (table) {
return(curves_df)
}
# plotly ####
p = plot_ly()
p = p %>% add_trace(data = curves_df, x = ~x, y = ~value,
color = ~variable, mode = "lines", type = "scatter",
colors = colors) %>% layout(plot_bgcolor = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)", font = list(color = "#1c0022"),
xaxis = list(showgrid = FALSE), yaxis = list(title = model$dv),
title = "Response Curves")
if(points) {
raw_data = model$model
# calculate predicted points through functions
curves_df = list()
for (i in 1:nrow(optim_table)) {
var = optim_table$variable_t[i]
coef = optim_table$coef[i]
x_raw = raw_data %>% pull(!!sym(var))
x = x_raw
for (j in 1:nrow(model$trans_df)) {
t_name = model$trans_df$name[j]
t_func = model$trans_df$func[j]
param_vals = model$output_model_table %>% filter(variable_t ==
var) %>% pull(!!sym(t_name)) %>% strsplit(split = ",")
param_vals = param_vals[[1]] %>% as.numeric()
if (length(param_vals) == 0) {
next
}
param_names = letters[1:length(param_vals)]
e <- new.env()
for (k in 1:length(param_vals)) {
p_name = param_names[k]
p_val = param_vals[k]
assign(p_name, p_val, envir = e)
}
x = t_func %>% run_text(env = e)
}
curves_df = list.append(curves_df, data.frame(value = x *
coef, variable = var, x = x_raw) %>% mutate(value = as.numeric(value)) %>%
mutate(variable = as.character(variable)) %>% mutate(x = as.numeric(x)))
}
curves_df = curves_df %>%
purrr::reduce(rbind) #%>%
# filter(value >= y_min) %>% filter(value <= y_max)
# add points to plotly item
p = p %>%  add_trace(data = curves_df, x = ~x, y = ~value,
color = ~variable, mode = "markers", type = "scatter",
colors = colors)
}
return(p)
}
library(linea)
model = run_model(data = scale(mtcars) %>% data.frame(),
dv = 'mpg',
ivs = c('wt','cyl','disp'))
model %>%
response_curves(points = T)
library(dplyr)
library(linea)
library(dplyr)
model = run_model(data = scale(mtcars) %>% data.frame(),
dv = 'mpg',
ivs = c('wt','cyl','disp'))
model %>%
response_curves(points = T)
library(rlist)
model = run_model(data = scale(mtcars) %>% data.frame(),
dv = 'mpg',
ivs = c('wt','cyl','disp'))
model %>%
response_curves(points = T)
View(row)
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
rv1 = reactiveVal(mtcars)
rv2 = reactiveVal(rv1())
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
rv1 = reactiveVal(mtcars)
rv2 = reactive(rv1())
}
shinyApp(ui, server)
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
# import data
data = read_xcsv(verbose = FALSE,
file = "https://raw.githubusercontent.com/paladinic/data/main/ecomm_data.csv") %>%
check_ts(verbose = FALSE,
allow_non_num = TRUE,
date_col = "date") %>%
get_seasonality(verbose = FALSE,
date_col_name = "date",
date_type = "weekly starting")
# vars
dv = "ecommerce"
ivs = c("black.friday", "christmas", "covid")
id_var = "date"
# model table
model_table = build_model_table(ivs)
model_table
model_table %>%
model_table$hill = c('1,2','','','')
model_table$hill = c('1,2','','')
model_table
trans_df = default_trans_df()
trans_df
trans_df = trans_df[c(1,3,4),]
trans_df
trans_df %>% rbind(c('custom','x^a','2'))
trans_df = trans_df %>% rbind(c('custom','x^a','2'))
new_model_table = build_model_table(trans_df = trans_df)
model_table %>% rbind(c('','0.5','','covid'))
model_table %>% rbind(c('','0.5','','','covid'))
model_table=model_table %>% rbind(c('','0.5','','','covid'))
model_table
new_model_table = build_model_table(trans_df = trans_df,ivs = model_table$variable)
new_model_table
new_model_table
model_table
old_trans = old_trans[old_trans %in% c('category',
'coef',
'se',
't_stat',
'p_value',
'variable')]
old_trans = colnames(model_table)
old_trans = old_trans[old_trans %in% c('category',
'coef',
'se',
't_stat',
'p_value',
'variable')]
old_trans
old_trans = colnames(model_table)
old_trans = old_trans[!(old_trans %in% c('category',
'coef',
'se',
't_stat',
'p_value',
'variable'))]
old_trans
new_trans_df = trans_df
new_trans_df
new_trans = new_trans_df$name
trans_to_drop = old_trans[!(old_trans %in% new_trans)]
trans_to_drop
trans_to_keep = old_trans[(old_trans %in% new_trans)]
trans_to_keep
trans_to_drop = old_trans[!(old_trans %in% new_trans)]
trans_to_keep = old_trans[(old_trans %in% new_trans)]
trans_to_add = new_trans[!(new_trans %in% old_trans)]
trans_to_add
model_table %>%
select(-c(trans_to_drop))
model_table %>%
select(-all_of(trans_to_drop))
model_table = model_table %>%
select(-all_of(trans_to_drop))
model_table %>% add_column(trans_to_add)
# add trans
model_table[,trans_to_add] = ''
model_table
# sort columns
model_table[,c('variable',new_trans_df$name,'category','coef','se','t_stat','p_value')]
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
get_variable_t
get_variable_t
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
shiny::runApp('C:/Users/44751/Desktop/github/r_linear_regression')
runApp()
run_model
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
remove.packages('linea')
getwd()
setwd('/Users/44751/Desktop/github/linea/linea/')
devtools::check()
devtools::check()
devtools::install()
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
remove.packages('linea')
devtools::install()
runApp('C:/Users/44751/Desktop/github/r_linear_regression')
shiny::runApp('C:/Users/44751/Desktop/github/r_linear_regression')
cranlogs_badge("linea", summary = "grand-total")
cranlogs::cranlogs_badge("linea", summary = "grand-total")
